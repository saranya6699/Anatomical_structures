import { __spread, __awaiter, __generator } from 'tslib';
import { Component, NgModule, ApplicationRef, destroyPlatform, VERSION, createPlatform } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { BrowserModule, ɵBrowserDomAdapter, ɵgetDOM } from '@angular/platform-browser';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { NgxsModule, Store } from '@ngxs/store';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsTestComponent = /** @class */ (function () {
    function NgxsTestComponent() {
    }
    /**
     * @return {?}
     */
    NgxsTestComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    NgxsTestComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    NgxsTestComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-root',
                    template: ''
                }] }
    ];
    return NgxsTestComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsTestModule = /** @class */ (function () {
    function NgxsTestModule() {
    }
    /**
     * @param {?} app
     * @return {?}
     */
    NgxsTestModule.ngDoBootstrap = /**
     * @param {?} app
     * @return {?}
     */
    function (app) {
        app.bootstrap(NgxsTestComponent);
    };
    NgxsTestModule.decorators = [
        { type: NgModule, args: [{
                    imports: [BrowserModule],
                    declarations: [NgxsTestComponent],
                    entryComponents: [NgxsTestComponent]
                },] }
    ];
    return NgxsTestModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgxsTestBed = /** @class */ (function () {
    function NgxsTestBed() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    NgxsTestBed.configureTestingStates = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.resetTestBed();
        if (options.before) {
            options.before();
        }
        TestBed.configureTestingModule({
            imports: __spread([
                NgxsTestModule,
                NgxsModule.forRoot(options.states || [], options.ngxsOptions || {})
            ], (options.imports || []))
        }).compileComponents();
        NgxsTestBed.ngxsBootstrap();
        return {
            /**
             * @return {?}
             */
            get store() {
                return TestBed.inject(Store);
            },
            /**
             * @return {?}
             */
            get getTestBed() {
                return TestBed;
            }
        };
    };
    /**
     * @private
     * @return {?}
     */
    NgxsTestBed.ngxsBootstrap = /**
     * @private
     * @return {?}
     */
    function () {
        NgxsTestBed.createRootNode();
        NgxsTestModule.ngDoBootstrap(TestBed.inject(ApplicationRef));
    };
    /**
     * @private
     * @return {?}
     */
    NgxsTestBed.resetTestBed = /**
     * @private
     * @return {?}
     */
    function () {
        TestBed.resetTestEnvironment();
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    };
    /**
     * @private
     * @param {?=} selector
     * @return {?}
     */
    NgxsTestBed.createRootNode = /**
     * @private
     * @param {?=} selector
     * @return {?}
     */
    function (selector) {
        if (selector === void 0) { selector = 'app-root'; }
        /** @type {?} */
        var document = TestBed.inject(DOCUMENT);
        /** @type {?} */
        var adapter = new ɵBrowserDomAdapter();
        /** @type {?} */
        var root = adapter.createElement(selector);
        document.body.appendChild(root);
    };
    return NgxsTestBed;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function createRootElement() {
    /** @type {?} */
    var document = TestBed.inject(DOCUMENT);
    /** @type {?} */
    var root = ɵgetDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
/**
 * @return {?}
 */
function removeRootElement() {
    /** @type {?} */
    var root = (/** @type {?} */ (document.getElementsByTagName('app-root').item(0)));
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
/**
 * @return {?}
 */
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
/**
 * @return {?}
 */
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    /** @type {?} */
    var version = +VERSION.major;
    // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa
    if (version < 14) {
        createPlatform(TestBed);
    }
}
/**
 * @param {?} fn
 * @return {?}
 */
function freshPlatform(fn) {
    /** @type {?} */
    var resolve = null;
    /** @type {?} */
    var reject = null;
    /** @type {?} */
    var whenDoneIsCalledPromise = null;
    /** @type {?} */
    var hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((/**
         * @param {?} _resolve
         * @param {?} _reject
         * @return {?}
         */
        function (_resolve, _reject) {
            resolve = _resolve;
            reject = _reject;
        }));
    }
    return (/**
     * @return {?}
     */
    function testWithAFreshPlatform() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 6, 7]);
                        destroyPlatformBeforeBootstrappingTheNewOne();
                        if (!hasDoneArgument) return [3 /*break*/, 3];
                        return [4 /*yield*/, fn((/**
                             * @param {?=} error
                             * @return {?}
                             */
                            function (error) {
                                if (error) {
                                    (/** @type {?} */ (reject))(error);
                                }
                                else {
                                    (/** @type {?} */ (resolve))();
                                }
                            }))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (/** @type {?} */ (whenDoneIsCalledPromise))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, fn()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        resetPlatformAfterBootstrapping();
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/// <reference types="jest" />
/// <reference types="jest" />
/**
 * @template T
 * @param {?} fn
 * @return {?}
 */
function skipConsoleLogging(fn) {
    /** @type {?} */
    var consoleSpies = [
        jest.spyOn(console, 'log').mockImplementation((/**
         * @return {?}
         */
        function () { })),
        jest.spyOn(console, 'warn').mockImplementation((/**
         * @return {?}
         */
        function () { })),
        jest.spyOn(console, 'error').mockImplementation((/**
         * @return {?}
         */
        function () { })),
        jest.spyOn(console, 'info').mockImplementation((/**
         * @return {?}
         */
        function () { }))
    ];
    /**
     * @return {?}
     */
    function restoreSpies() {
        consoleSpies.forEach((/**
         * @param {?} spy
         * @return {?}
         */
        function (spy) { return spy.mockRestore(); }));
    }
    /** @type {?} */
    var restoreSpyAsync = false;
    try {
        /** @type {?} */
        var returnValue = fn();
        if (returnValue instanceof Promise) {
            restoreSpyAsync = true;
            return (/** @type {?} */ (returnValue.finally((/**
             * @return {?}
             */
            function () { return restoreSpies(); }))));
        }
        return returnValue;
    }
    finally {
        if (!restoreSpyAsync) {
            restoreSpies();
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxsTestBed, freshPlatform, skipConsoleLogging };
//# sourceMappingURL=ngxs-store-internals-testing.js.map
