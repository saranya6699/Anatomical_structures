/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { propGetter } from '../../internal/internals';
import { SelectFactory } from './select-factory';
import { throwSelectFactoryNotConnectedError } from '../../configs/messages.config';
/** @type {?} */
var DOLLAR_CHAR_CODE = 36;
/**
 * @template T
 * @param {?} selector
 * @return {?}
 */
export function createSelectObservable(selector) {
    if (!SelectFactory.store) {
        throwSelectFactoryNotConnectedError();
    }
    return (/** @type {?} */ (SelectFactory.store)).select(selector);
}
/**
 * @param {?} name
 * @param {?=} rawSelector
 * @param {?=} paths
 * @return {?}
 */
export function createSelectorFn(name, rawSelector, paths) {
    if (paths === void 0) { paths = []; }
    rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;
    if (typeof rawSelector === 'string') {
        /** @type {?} */
        var propsArray = paths.length
            ? tslib_1.__spread([rawSelector], paths) : rawSelector.split('.');
        return propGetter(propsArray, (/** @type {?} */ (SelectFactory.config)));
    }
    return rawSelector;
}
/**
 * \@example If `foo$` => make it just `foo`
 * @param {?} name
 * @return {?}
 */
export function removeDollarAtTheEnd(name) {
    /** @type {?} */
    var lastCharIndex = name.length - 1;
    /** @type {?} */
    var dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;
    return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL2RlY29yYXRvcnMvc2VsZWN0L3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2pELE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLCtCQUErQixDQUFDOztJQUU5RSxnQkFBZ0IsR0FBRyxFQUFFOzs7Ozs7QUFFM0IsTUFBTSxVQUFVLHNCQUFzQixDQUFVLFFBQWE7SUFDM0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUU7UUFDeEIsbUNBQW1DLEVBQUUsQ0FBQztLQUN2QztJQUNELE9BQU8sbUJBQUEsYUFBYSxDQUFDLEtBQUssRUFBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQyxDQUFDOzs7Ozs7O0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLElBQVksRUFBRSxXQUFpQixFQUFFLEtBQW9CO0lBQXBCLHNCQUFBLEVBQUEsVUFBb0I7SUFDcEYsV0FBVyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBRXRFLElBQUksT0FBTyxXQUFXLEtBQUssUUFBUSxFQUFFOztZQUM3QixVQUFVLEdBQWEsS0FBSyxDQUFDLE1BQU07WUFDdkMsQ0FBQyxtQkFBRSxXQUFXLEdBQUssS0FBSyxFQUN4QixDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDMUIsT0FBTyxVQUFVLENBQUMsVUFBVSxFQUFFLG1CQUFBLGFBQWEsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO0tBQ3REO0lBRUQsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQzs7Ozs7O0FBS0QsTUFBTSxVQUFVLG9CQUFvQixDQUFDLElBQVk7O1FBQ3pDLGFBQWEsR0FBVyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7O1FBQ3ZDLGNBQWMsR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLGdCQUFnQjtJQUNuRixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUM5RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBwcm9wR2V0dGVyIH0gZnJvbSAnLi4vLi4vaW50ZXJuYWwvaW50ZXJuYWxzJztcbmltcG9ydCB7IFNlbGVjdEZhY3RvcnkgfSBmcm9tICcuL3NlbGVjdC1mYWN0b3J5JztcbmltcG9ydCB7IFN0YXRlVG9rZW4gfSBmcm9tICcuLi8uLi9zdGF0ZS10b2tlbi9zdGF0ZS10b2tlbic7XG5pbXBvcnQgeyBFeHRyYWN0VG9rZW5UeXBlIH0gZnJvbSAnLi4vLi4vc3RhdGUtdG9rZW4vc3ltYm9scyc7XG5pbXBvcnQgeyB0aHJvd1NlbGVjdEZhY3RvcnlOb3RDb25uZWN0ZWRFcnJvciB9IGZyb20gJy4uLy4uL2NvbmZpZ3MvbWVzc2FnZXMuY29uZmlnJztcblxuY29uc3QgRE9MTEFSX0NIQVJfQ09ERSA9IDM2O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZTxUID0gYW55PihzZWxlY3RvcjogYW55KTogT2JzZXJ2YWJsZTxUPiB7XG4gIGlmICghU2VsZWN0RmFjdG9yeS5zdG9yZSkge1xuICAgIHRocm93U2VsZWN0RmFjdG9yeU5vdENvbm5lY3RlZEVycm9yKCk7XG4gIH1cbiAgcmV0dXJuIFNlbGVjdEZhY3Rvcnkuc3RvcmUhLnNlbGVjdChzZWxlY3Rvcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvckZuKG5hbWU6IHN0cmluZywgcmF3U2VsZWN0b3I/OiBhbnksIHBhdGhzOiBzdHJpbmdbXSA9IFtdKTogYW55IHtcbiAgcmF3U2VsZWN0b3IgPSAhcmF3U2VsZWN0b3IgPyByZW1vdmVEb2xsYXJBdFRoZUVuZChuYW1lKSA6IHJhd1NlbGVjdG9yO1xuXG4gIGlmICh0eXBlb2YgcmF3U2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgcHJvcHNBcnJheTogc3RyaW5nW10gPSBwYXRocy5sZW5ndGhcbiAgICAgID8gW3Jhd1NlbGVjdG9yLCAuLi5wYXRoc11cbiAgICAgIDogcmF3U2VsZWN0b3Iuc3BsaXQoJy4nKTtcbiAgICByZXR1cm4gcHJvcEdldHRlcihwcm9wc0FycmF5LCBTZWxlY3RGYWN0b3J5LmNvbmZpZyEpO1xuICB9XG5cbiAgcmV0dXJuIHJhd1NlbGVjdG9yO1xufVxuXG4vKipcbiAqIEBleGFtcGxlIElmIGBmb28kYCA9PiBtYWtlIGl0IGp1c3QgYGZvb2BcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZURvbGxhckF0VGhlRW5kKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGxhc3RDaGFySW5kZXg6IG51bWJlciA9IG5hbWUubGVuZ3RoIC0gMTtcbiAgY29uc3QgZG9sbGFyQXRUaGVFbmQ6IGJvb2xlYW4gPSBuYW1lLmNoYXJDb2RlQXQobGFzdENoYXJJbmRleCkgPT09IERPTExBUl9DSEFSX0NPREU7XG4gIHJldHVybiBkb2xsYXJBdFRoZUVuZCA/IG5hbWUuc2xpY2UoMCwgbGFzdENoYXJJbmRleCkgOiBuYW1lO1xufVxuXG5leHBvcnQgdHlwZSBQcm9wZXJ0eVR5cGU8VD4gPSBUIGV4dGVuZHMgU3RhdGVUb2tlbjxhbnk+XG4gID8gT2JzZXJ2YWJsZTxFeHRyYWN0VG9rZW5UeXBlPFQ+PlxuICA6IFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueVxuICA/IE9ic2VydmFibGU8UmV0dXJuVHlwZTxUPj5cbiAgOiBhbnk7XG4iXX0=