/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgxsBootstrapper } from '@ngxs/store/internals';
import { EMPTY, Subject } from 'rxjs';
import { catchError, filter, mergeMap, pairwise, startWith, takeUntil, tap } from 'rxjs/operators';
import { Store } from '../store';
import { getValue } from '../utils/utils';
import { InternalErrorReporter } from './error-handler';
import { StateContextFactory } from './state-context-factory';
import { InternalStateOperations } from './state-operations';
import { NgxsSimpleChange } from '../symbols';
var LifecycleStateManager = /** @class */ (function () {
    function LifecycleStateManager(_store, _internalErrorReporter, _internalStateOperations, _stateContextFactory, _bootstrapper) {
        this._store = _store;
        this._internalErrorReporter = _internalErrorReporter;
        this._internalStateOperations = _internalStateOperations;
        this._stateContextFactory = _stateContextFactory;
        this._bootstrapper = _bootstrapper;
        this._destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    LifecycleStateManager.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroy$.next();
    };
    /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    LifecycleStateManager.prototype.ngxsBootstrap = /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    function (action, results) {
        var _this = this;
        this._internalStateOperations
            .getRootStateOperations()
            .dispatch(action)
            .pipe(filter((/**
         * @return {?}
         */
        function () { return !!results; })), tap((/**
         * @return {?}
         */
        function () { return _this._invokeInitOnStates((/** @type {?} */ (results)).states); })), mergeMap((/**
         * @return {?}
         */
        function () { return _this._bootstrapper.appBootstrapped$; })), filter((/**
         * @param {?} appBootstrapped
         * @return {?}
         */
        function (appBootstrapped) { return !!appBootstrapped; })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            // The `SafeSubscriber` (which is used by most RxJS operators) re-throws
            // errors asynchronously (`setTimeout(() => { throw error })`). This might
            // break existing user's code or unit tests. We catch the error manually to
            // be backward compatible with the old behavior.
            _this._internalErrorReporter.reportErrorSafely(error);
            return EMPTY;
        })), takeUntil(this._destroy$))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this._invokeBootstrapOnStates((/** @type {?} */ (results)).states); }));
    };
    /**
     * @private
     * @param {?} mappedStores
     * @return {?}
     */
    LifecycleStateManager.prototype._invokeInitOnStates = /**
     * @private
     * @param {?} mappedStores
     * @return {?}
     */
    function (mappedStores) {
        var e_1, _a;
        var _loop_1 = function (mappedStore) {
            /** @type {?} */
            var instance = mappedStore.instance;
            if (instance.ngxsOnChanges) {
                this_1._store
                    .select((/**
                 * @param {?} state
                 * @return {?}
                 */
                function (state) { return getValue(state, mappedStore.path); }))
                    .pipe(startWith(undefined), pairwise(), takeUntil(this_1._destroy$))
                    .subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = tslib_1.__read(_a, 2), previousValue = _b[0], currentValue = _b[1];
                    /** @type {?} */
                    var change = new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);
                    (/** @type {?} */ (instance.ngxsOnChanges))(change);
                }));
            }
            if (instance.ngxsOnInit) {
                instance.ngxsOnInit(this_1._getStateContext(mappedStore));
            }
            mappedStore.isInitialised = true;
        };
        var this_1 = this;
        try {
            for (var mappedStores_1 = tslib_1.__values(mappedStores), mappedStores_1_1 = mappedStores_1.next(); !mappedStores_1_1.done; mappedStores_1_1 = mappedStores_1.next()) {
                var mappedStore = mappedStores_1_1.value;
                _loop_1(mappedStore);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (mappedStores_1_1 && !mappedStores_1_1.done && (_a = mappedStores_1.return)) _a.call(mappedStores_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @private
     * @param {?} mappedStores
     * @return {?}
     */
    LifecycleStateManager.prototype._invokeBootstrapOnStates = /**
     * @private
     * @param {?} mappedStores
     * @return {?}
     */
    function (mappedStores) {
        var e_2, _a;
        try {
            for (var mappedStores_2 = tslib_1.__values(mappedStores), mappedStores_2_1 = mappedStores_2.next(); !mappedStores_2_1.done; mappedStores_2_1 = mappedStores_2.next()) {
                var mappedStore = mappedStores_2_1.value;
                /** @type {?} */
                var instance = mappedStore.instance;
                if (instance.ngxsAfterBootstrap) {
                    instance.ngxsAfterBootstrap(this._getStateContext(mappedStore));
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (mappedStores_2_1 && !mappedStores_2_1.done && (_a = mappedStores_2.return)) _a.call(mappedStores_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @private
     * @param {?} mappedStore
     * @return {?}
     */
    LifecycleStateManager.prototype._getStateContext = /**
     * @private
     * @param {?} mappedStore
     * @return {?}
     */
    function (mappedStore) {
        return this._stateContextFactory.createStateContext(mappedStore);
    };
    LifecycleStateManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LifecycleStateManager.ctorParameters = function () { return [
        { type: Store },
        { type: InternalErrorReporter },
        { type: InternalStateOperations },
        { type: StateContextFactory },
        { type: NgxsBootstrapper }
    ]; };
    return LifecycleStateManager;
}());
export { LifecycleStateManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._destroy$;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._store;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._internalErrorReporter;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._internalStateOperations;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._stateContextFactory;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._bootstrapper;
}
//# sourceMappingURL=data:application/json;base64,