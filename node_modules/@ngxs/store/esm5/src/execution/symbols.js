/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken, inject, INJECTOR, ɵglobal } from '@angular/core';
import { NoopNgxsExecutionStrategy } from './noop-ngxs-execution-strategy';
import { DispatchOutsideZoneNgxsExecutionStrategy } from './dispatch-outside-zone-ngxs-execution-strategy';
/**
 * The strategy that might be provided by users through `options.executionStrategy`.
 * @type {?}
 */
export var USER_PROVIDED_NGXS_EXECUTION_STRATEGY = new InjectionToken('USER_PROVIDED_NGXS_EXECUTION_STRATEGY');
/*
 * Internal execution strategy injection token
 */
/** @type {?} */
export var NGXS_EXECUTION_STRATEGY = new InjectionToken('NGXS_EXECUTION_STRATEGY', {
    providedIn: 'root',
    factory: (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var injector = inject(INJECTOR);
        /** @type {?} */
        var executionStrategy = injector.get(USER_PROVIDED_NGXS_EXECUTION_STRATEGY);
        return executionStrategy
            ? injector.get(executionStrategy)
            : injector.get(typeof ɵglobal.Zone !== 'undefined'
                ? DispatchOutsideZoneNgxsExecutionStrategy
                : NoopNgxsExecutionStrategy);
    })
});
/**
 * @record
 */
export function NgxsExecutionStrategy() { }
if (false) {
    /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    NgxsExecutionStrategy.prototype.enter = function (func) { };
    /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    NgxsExecutionStrategy.prototype.leave = function (func) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL2V4ZWN1dGlvbi9zeW1ib2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQVEsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSx3Q0FBd0MsRUFBRSxNQUFNLGlEQUFpRCxDQUFDOzs7OztBQUszRyxNQUFNLEtBQU8scUNBQXFDLEdBQUcsSUFBSSxjQUFjLENBRXJFLHVDQUF1QyxDQUFDOzs7OztBQUsxQyxNQUFNLEtBQU8sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQ3ZELHlCQUF5QixFQUN6QjtJQUNFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU87OztJQUFFOztZQUNELFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDOztZQUMzQixpQkFBaUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDO1FBQzdFLE9BQU8saUJBQWlCO1lBQ3RCLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDO1lBQ2pDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUNWLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxXQUFXO2dCQUNqQyxDQUFDLENBQUMsd0NBQXdDO2dCQUMxQyxDQUFDLENBQUMseUJBQXlCLENBQzlCLENBQUM7SUFDUixDQUFDLENBQUE7Q0FDRixDQUNGOzs7O0FBS0QsMkNBR0M7Ozs7Ozs7SUFGQyw0REFBMkI7Ozs7OztJQUMzQiw0REFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiwgaW5qZWN0LCBJTkpFQ1RPUiwgVHlwZSwgybVnbG9iYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTm9vcE5neHNFeGVjdXRpb25TdHJhdGVneSB9IGZyb20gJy4vbm9vcC1uZ3hzLWV4ZWN1dGlvbi1zdHJhdGVneSc7XG5pbXBvcnQgeyBEaXNwYXRjaE91dHNpZGVab25lTmd4c0V4ZWN1dGlvblN0cmF0ZWd5IH0gZnJvbSAnLi9kaXNwYXRjaC1vdXRzaWRlLXpvbmUtbmd4cy1leGVjdXRpb24tc3RyYXRlZ3knO1xuXG4vKipcbiAqIFRoZSBzdHJhdGVneSB0aGF0IG1pZ2h0IGJlIHByb3ZpZGVkIGJ5IHVzZXJzIHRocm91Z2ggYG9wdGlvbnMuZXhlY3V0aW9uU3RyYXRlZ3lgLlxuICovXG5leHBvcnQgY29uc3QgVVNFUl9QUk9WSURFRF9OR1hTX0VYRUNVVElPTl9TVFJBVEVHWSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxcbiAgVHlwZTxOZ3hzRXhlY3V0aW9uU3RyYXRlZ3k+IHwgdW5kZWZpbmVkXG4+KCdVU0VSX1BST1ZJREVEX05HWFNfRVhFQ1VUSU9OX1NUUkFURUdZJyk7XG5cbi8qXG4gKiBJbnRlcm5hbCBleGVjdXRpb24gc3RyYXRlZ3kgaW5qZWN0aW9uIHRva2VuXG4gKi9cbmV4cG9ydCBjb25zdCBOR1hTX0VYRUNVVElPTl9TVFJBVEVHWSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxOZ3hzRXhlY3V0aW9uU3RyYXRlZ3k+KFxuICAnTkdYU19FWEVDVVRJT05fU1RSQVRFR1knLFxuICB7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICAgIGZhY3Rvcnk6ICgpID0+IHtcbiAgICAgIGNvbnN0IGluamVjdG9yID0gaW5qZWN0KElOSkVDVE9SKTtcbiAgICAgIGNvbnN0IGV4ZWN1dGlvblN0cmF0ZWd5ID0gaW5qZWN0b3IuZ2V0KFVTRVJfUFJPVklERURfTkdYU19FWEVDVVRJT05fU1RSQVRFR1kpO1xuICAgICAgcmV0dXJuIGV4ZWN1dGlvblN0cmF0ZWd5XG4gICAgICAgID8gaW5qZWN0b3IuZ2V0KGV4ZWN1dGlvblN0cmF0ZWd5KVxuICAgICAgICA6IGluamVjdG9yLmdldChcbiAgICAgICAgICAgIHR5cGVvZiDJtWdsb2JhbC5ab25lICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICA/IERpc3BhdGNoT3V0c2lkZVpvbmVOZ3hzRXhlY3V0aW9uU3RyYXRlZ3lcbiAgICAgICAgICAgICAgOiBOb29wTmd4c0V4ZWN1dGlvblN0cmF0ZWd5XG4gICAgICAgICAgKTtcbiAgICB9XG4gIH1cbik7XG5cbi8qXG4gKiBFeGVjdXRpb24gc3RyYXRlZ3kgaW50ZXJmYWNlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmd4c0V4ZWN1dGlvblN0cmF0ZWd5IHtcbiAgZW50ZXI8VD4oZnVuYzogKCkgPT4gVCk6IFQ7XG4gIGxlYXZlPFQ+KGZ1bmM6ICgpID0+IFQpOiBUO1xufVxuIl19