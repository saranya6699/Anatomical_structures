/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { getZoneWarningMessage } from '../configs/messages.config';
import * as i0 from "@angular/core";
var DispatchOutsideZoneNgxsExecutionStrategy = /** @class */ (function () {
    function DispatchOutsideZoneNgxsExecutionStrategy(_ngZone, _platformId) {
        this._ngZone = _ngZone;
        this._platformId = _platformId;
        // Caretaker note: we have still left the `typeof` condition in order to avoid
        // creating a breaking change for projects that still use the View Engine.
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
            verifyZoneIsNotNooped(_ngZone);
        }
    }
    /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    DispatchOutsideZoneNgxsExecutionStrategy.prototype.enter = /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    function (func) {
        if (isPlatformServer(this._platformId)) {
            return this.runInsideAngular(func);
        }
        return this.runOutsideAngular(func);
    };
    /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    DispatchOutsideZoneNgxsExecutionStrategy.prototype.leave = /**
     * @template T
     * @param {?} func
     * @return {?}
     */
    function (func) {
        return this.runInsideAngular(func);
    };
    /**
     * @private
     * @template T
     * @param {?} func
     * @return {?}
     */
    DispatchOutsideZoneNgxsExecutionStrategy.prototype.runInsideAngular = /**
     * @private
     * @template T
     * @param {?} func
     * @return {?}
     */
    function (func) {
        if (NgZone.isInAngularZone()) {
            return func();
        }
        return this._ngZone.run(func);
    };
    /**
     * @private
     * @template T
     * @param {?} func
     * @return {?}
     */
    DispatchOutsideZoneNgxsExecutionStrategy.prototype.runOutsideAngular = /**
     * @private
     * @template T
     * @param {?} func
     * @return {?}
     */
    function (func) {
        if (NgZone.isInAngularZone()) {
            return this._ngZone.runOutsideAngular(func);
        }
        return func();
    };
    DispatchOutsideZoneNgxsExecutionStrategy.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    DispatchOutsideZoneNgxsExecutionStrategy.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    /** @nocollapse */ DispatchOutsideZoneNgxsExecutionStrategy.ngInjectableDef = i0.defineInjectable({ factory: function DispatchOutsideZoneNgxsExecutionStrategy_Factory() { return new DispatchOutsideZoneNgxsExecutionStrategy(i0.inject(i0.NgZone), i0.inject(i0.PLATFORM_ID)); }, token: DispatchOutsideZoneNgxsExecutionStrategy, providedIn: "root" });
    return DispatchOutsideZoneNgxsExecutionStrategy;
}());
export { DispatchOutsideZoneNgxsExecutionStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DispatchOutsideZoneNgxsExecutionStrategy.prototype._ngZone;
    /**
     * @type {?}
     * @private
     */
    DispatchOutsideZoneNgxsExecutionStrategy.prototype._platformId;
}
// Caretaker note: this should exist as a separate function and not a class method,
// since class methods are not tree-shakable.
/**
 * @param {?} ngZone
 * @return {?}
 */
function verifyZoneIsNotNooped(ngZone) {
    // `NoopNgZone` is not exposed publicly as it doesn't expect
    // to be used outside of the core Angular code, thus we just have
    // to check if the zone doesn't extend or instanceof `NgZone`.
    if (ngZone instanceof NgZone) {
        return;
    }
    console.warn(getZoneWarningMessage());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGF0Y2gtb3V0c2lkZS16b25lLW5neHMtZXhlY3V0aW9uLXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvZXhlY3V0aW9uL2Rpc3BhdGNoLW91dHNpZGUtem9uZS1uZ3hzLWV4ZWN1dGlvbi1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUduRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFFbkU7SUFFRSxrREFBb0IsT0FBZSxFQUErQixXQUFtQjtRQUFqRSxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQStCLGdCQUFXLEdBQVgsV0FBVyxDQUFRO1FBQ25GLDhFQUE4RTtRQUM5RSwwRUFBMEU7UUFDMUUsSUFBSSxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxFQUFFO1lBQ2pELHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQzs7Ozs7O0lBRUQsd0RBQUs7Ozs7O0lBQUwsVUFBUyxJQUFhO1FBQ3BCLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7Ozs7O0lBRUQsd0RBQUs7Ozs7O0lBQUwsVUFBUyxJQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Ozs7Ozs7SUFFTyxtRUFBZ0I7Ozs7OztJQUF4QixVQUE0QixJQUFhO1FBQ3ZDLElBQUksTUFBTSxDQUFDLGVBQWUsRUFBRSxFQUFFO1lBQzVCLE9BQU8sSUFBSSxFQUFFLENBQUM7U0FDZjtRQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7OztJQUVPLG9FQUFpQjs7Ozs7O0lBQXpCLFVBQTZCLElBQWE7UUFDeEMsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDOztnQkFqQ0YsVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztnQkFOTCxNQUFNOzZDQVFLLE1BQU0sU0FBQyxXQUFXOzs7bURBUjFEO0NBd0NDLEFBbENELElBa0NDO1NBakNZLHdDQUF3Qzs7Ozs7O0lBQ3ZDLDJEQUF1Qjs7Ozs7SUFBRSwrREFBZ0Q7Ozs7Ozs7O0FBb0N2RixTQUFTLHFCQUFxQixDQUFDLE1BQWM7SUFDM0MsNERBQTREO0lBQzVELGlFQUFpRTtJQUNqRSw4REFBOEQ7SUFDOUQsSUFBSSxNQUFNLFlBQVksTUFBTSxFQUFFO1FBQzVCLE9BQU87S0FDUjtJQUVELE9BQU8sQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO0FBQ3hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZSwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBOZ3hzRXhlY3V0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHsgZ2V0Wm9uZVdhcm5pbmdNZXNzYWdlIH0gZnJvbSAnLi4vY29uZmlncy9tZXNzYWdlcy5jb25maWcnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIERpc3BhdGNoT3V0c2lkZVpvbmVOZ3hzRXhlY3V0aW9uU3RyYXRlZ3kgaW1wbGVtZW50cyBOZ3hzRXhlY3V0aW9uU3RyYXRlZ3kge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9uZ1pvbmU6IE5nWm9uZSwgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBfcGxhdGZvcm1JZDogc3RyaW5nKSB7XG4gICAgLy8gQ2FyZXRha2VyIG5vdGU6IHdlIGhhdmUgc3RpbGwgbGVmdCB0aGUgYHR5cGVvZmAgY29uZGl0aW9uIGluIG9yZGVyIHRvIGF2b2lkXG4gICAgLy8gY3JlYXRpbmcgYSBicmVha2luZyBjaGFuZ2UgZm9yIHByb2plY3RzIHRoYXQgc3RpbGwgdXNlIHRoZSBWaWV3IEVuZ2luZS5cbiAgICBpZiAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSB7XG4gICAgICB2ZXJpZnlab25lSXNOb3ROb29wZWQoX25nWm9uZSk7XG4gICAgfVxuICB9XG5cbiAgZW50ZXI8VD4oZnVuYzogKCkgPT4gVCk6IFQge1xuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMuX3BsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5ydW5JbnNpZGVBbmd1bGFyKGZ1bmMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ydW5PdXRzaWRlQW5ndWxhcihmdW5jKTtcbiAgfVxuXG4gIGxlYXZlPFQ+KGZ1bmM6ICgpID0+IFQpOiBUIHtcbiAgICByZXR1cm4gdGhpcy5ydW5JbnNpZGVBbmd1bGFyKGZ1bmMpO1xuICB9XG5cbiAgcHJpdmF0ZSBydW5JbnNpZGVBbmd1bGFyPFQ+KGZ1bmM6ICgpID0+IFQpOiBUIHtcbiAgICBpZiAoTmdab25lLmlzSW5Bbmd1bGFyWm9uZSgpKSB7XG4gICAgICByZXR1cm4gZnVuYygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbmdab25lLnJ1bihmdW5jKTtcbiAgfVxuXG4gIHByaXZhdGUgcnVuT3V0c2lkZUFuZ3VsYXI8VD4oZnVuYzogKCkgPT4gVCk6IFQge1xuICAgIGlmIChOZ1pvbmUuaXNJbkFuZ3VsYXJab25lKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLl9uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoZnVuYyk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jKCk7XG4gIH1cbn1cblxuLy8gQ2FyZXRha2VyIG5vdGU6IHRoaXMgc2hvdWxkIGV4aXN0IGFzIGEgc2VwYXJhdGUgZnVuY3Rpb24gYW5kIG5vdCBhIGNsYXNzIG1ldGhvZCxcbi8vIHNpbmNlIGNsYXNzIG1ldGhvZHMgYXJlIG5vdCB0cmVlLXNoYWthYmxlLlxuZnVuY3Rpb24gdmVyaWZ5Wm9uZUlzTm90Tm9vcGVkKG5nWm9uZTogTmdab25lKTogdm9pZCB7XG4gIC8vIGBOb29wTmdab25lYCBpcyBub3QgZXhwb3NlZCBwdWJsaWNseSBhcyBpdCBkb2Vzbid0IGV4cGVjdFxuICAvLyB0byBiZSB1c2VkIG91dHNpZGUgb2YgdGhlIGNvcmUgQW5ndWxhciBjb2RlLCB0aHVzIHdlIGp1c3QgaGF2ZVxuICAvLyB0byBjaGVjayBpZiB0aGUgem9uZSBkb2Vzbid0IGV4dGVuZCBvciBpbnN0YW5jZW9mIGBOZ1pvbmVgLlxuICBpZiAobmdab25lIGluc3RhbmNlb2YgTmdab25lKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc29sZS53YXJuKGdldFpvbmVXYXJuaW5nTWVzc2FnZSgpKTtcbn1cbiJdfQ==