/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { VERSION, destroyPlatform, createPlatform } from '@angular/core';
/**
 * @return {?}
 */
function createRootElement() {
    /** @type {?} */
    var document = TestBed.inject(DOCUMENT);
    /** @type {?} */
    var root = getDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
/**
 * @return {?}
 */
function removeRootElement() {
    /** @type {?} */
    var root = (/** @type {?} */ (document.getElementsByTagName('app-root').item(0)));
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
/**
 * @return {?}
 */
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
/**
 * @return {?}
 */
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    /** @type {?} */
    var version = +VERSION.major;
    // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa
    if (version < 14) {
        createPlatform(TestBed);
    }
}
/**
 * @param {?} fn
 * @return {?}
 */
export function freshPlatform(fn) {
    /** @type {?} */
    var resolve = null;
    /** @type {?} */
    var reject = null;
    /** @type {?} */
    var whenDoneIsCalledPromise = null;
    /** @type {?} */
    var hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((/**
         * @param {?} _resolve
         * @param {?} _reject
         * @return {?}
         */
        function (_resolve, _reject) {
            resolve = _resolve;
            reject = _reject;
        }));
    }
    return (/**
     * @return {?}
     */
    function testWithAFreshPlatform() {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 6, 7]);
                        destroyPlatformBeforeBootstrappingTheNewOne();
                        if (!hasDoneArgument) return [3 /*break*/, 3];
                        return [4 /*yield*/, fn((/**
                             * @param {?=} error
                             * @return {?}
                             */
                            function (error) {
                                if (error) {
                                    (/** @type {?} */ (reject))(error);
                                }
                                else {
                                    (/** @type {?} */ (resolve))();
                                }
                            }))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, (/** @type {?} */ (whenDoneIsCalledPromise))];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, fn()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        resetPlatformAfterBootstrapping();
                        return [7 /*endfinally*/];
                    case 7: return [2 /*return*/];
                }
            });
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlc2gtcGxhdGZvcm0uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy8iLCJzb3VyY2VzIjpbImZyZXNoLXBsYXRmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUV6RSxTQUFTLGlCQUFpQjs7UUFDbEIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDOztRQUNuQyxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7SUFDekQsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsQ0FBQzs7OztBQUVELFNBQVMsaUJBQWlCOztRQUNsQixJQUFJLEdBQVksbUJBQUEsUUFBUSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQztJQUN4RSxJQUFJO1FBQ0YsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakM7SUFBQyxXQUFNLEdBQUU7QUFDWixDQUFDOzs7O0FBRUQsU0FBUywyQ0FBMkM7SUFDbEQsZUFBZSxFQUFFLENBQUM7SUFDbEIsaUJBQWlCLEVBQUUsQ0FBQztBQUN0QixDQUFDOzs7Ozs7O0FBS0QsU0FBUywrQkFBK0I7SUFDdEMsaUJBQWlCLEVBQUUsQ0FBQztJQUNwQixlQUFlLEVBQUUsQ0FBQzs7UUFDWixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSztJQUM5QixxRkFBcUY7SUFDckYsSUFBSSxPQUFPLEdBQUcsRUFBRSxFQUFFO1FBQ2hCLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN6QjtBQUNILENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUEwQzs7UUFDbEUsT0FBTyxHQUF3QixJQUFJOztRQUNuQyxNQUFNLEdBQW9DLElBQUk7O1FBQzlDLHVCQUF1QixHQUF5QixJQUFJOztRQUVsRCxlQUFlLEdBQUcsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDO0lBRXZDLElBQUksZUFBZSxFQUFFO1FBQ25CLHVCQUF1QixHQUFHLElBQUksT0FBTzs7Ozs7UUFBTyxVQUFDLFFBQVEsRUFBRSxPQUFPO1lBQzVELE9BQU8sR0FBRyxRQUFRLENBQUM7WUFDbkIsTUFBTSxHQUFHLE9BQU8sQ0FBQztRQUNuQixDQUFDLEVBQUMsQ0FBQztLQUNKO0lBRUQ7OztJQUFPLFNBQWUsc0JBQXNCOzs7Ozs7d0JBRXhDLDJDQUEyQyxFQUFFLENBQUM7NkJBRTFDLGVBQWUsRUFBZix3QkFBZTt3QkFDakIscUJBQU0sRUFBRTs7Ozs0QkFBQyxVQUFDLEtBQWE7Z0NBQ3JCLElBQUksS0FBSyxFQUFFO29DQUNULG1CQUFBLE1BQU0sRUFBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lDQUNoQjtxQ0FBTTtvQ0FDTCxtQkFBQSxPQUFPLEVBQUMsRUFBRSxDQUFDO2lDQUNaOzRCQUNILENBQUMsRUFBQyxFQUFBOzt3QkFORixTQU1FLENBQUM7d0JBQ0gscUJBQU0sbUJBQUEsdUJBQXVCLEVBQUMsRUFBQTs7d0JBQTlCLFNBQThCLENBQUM7OzRCQUUvQixxQkFBTSxFQUFFLEVBQUUsRUFBQTs7d0JBQVYsU0FBVSxDQUFDOzs7O3dCQUdiLCtCQUErQixFQUFFLENBQUM7Ozs7OztLQUVyQyxFQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgybVnZXRET00gYXMgZ2V0RE9NIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBWRVJTSU9OLCBkZXN0cm95UGxhdGZvcm0sIGNyZWF0ZVBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RFbGVtZW50KCkge1xuICBjb25zdCBkb2N1bWVudCA9IFRlc3RCZWQuaW5qZWN0KERPQ1VNRU5UKTtcbiAgY29uc3Qgcm9vdCA9IGdldERPTSgpLmNyZWF0ZUVsZW1lbnQoJ2FwcC1yb290JywgZG9jdW1lbnQpO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJvb3QpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVSb290RWxlbWVudCgpIHtcbiAgY29uc3Qgcm9vdDogRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhcHAtcm9vdCcpLml0ZW0oMCkhO1xuICB0cnkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQocm9vdCk7XG4gIH0gY2F0Y2gge31cbn1cblxuZnVuY3Rpb24gZGVzdHJveVBsYXRmb3JtQmVmb3JlQm9vdHN0cmFwcGluZ1RoZU5ld09uZSgpIHtcbiAgZGVzdHJveVBsYXRmb3JtKCk7XG4gIGNyZWF0ZVJvb3RFbGVtZW50KCk7XG59XG5cbi8vIEFzIHdlIGNyZWF0ZSBvdXIgY3VzdG9tIHBsYXRmb3JtIHZpYSBgYm9vdHN0cmFwTW9kdWxlYFxuLy8gd2UgaGF2ZSB0byBkZXN0cm95IGl0IGFmdGVyIGFzc2V0aW9ucyBhbmQgcmV2ZXJ0XG4vLyB0aGUgcHJldmlvdXMgb25lXG5mdW5jdGlvbiByZXNldFBsYXRmb3JtQWZ0ZXJCb290c3RyYXBwaW5nKCkge1xuICByZW1vdmVSb290RWxlbWVudCgpO1xuICBkZXN0cm95UGxhdGZvcm0oKTtcbiAgY29uc3QgdmVyc2lvbiA9ICtWRVJTSU9OLm1ham9yO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2NvbW1pdC9lMjUwZGI0ZjI2MTc0MWIwNGVlNGNiYWQ0ZGVjNDFhODkwOGExMmFhXG4gIGlmICh2ZXJzaW9uIDwgMTQpIHtcbiAgICBjcmVhdGVQbGF0Zm9ybShUZXN0QmVkKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZnJlc2hQbGF0Zm9ybShmbjogKGRvbmU/OiBWb2lkRnVuY3Rpb24pID0+IFByb21pc2U8dm9pZD4pIHtcbiAgbGV0IHJlc29sdmU6IFZvaWRGdW5jdGlvbiB8IG51bGwgPSBudWxsO1xuICBsZXQgcmVqZWN0OiAoKGVycm9yOiBFcnJvcikgPT4gdm9pZCkgfCBudWxsID0gbnVsbDtcbiAgbGV0IHdoZW5Eb25lSXNDYWxsZWRQcm9taXNlOiBQcm9taXNlPHZvaWQ+IHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3QgaGFzRG9uZUFyZ3VtZW50ID0gZm4ubGVuZ3RoID09PSAxO1xuXG4gIGlmIChoYXNEb25lQXJndW1lbnQpIHtcbiAgICB3aGVuRG9uZUlzQ2FsbGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlPHZvaWQ+KChfcmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xuICAgICAgcmVzb2x2ZSA9IF9yZXNvbHZlO1xuICAgICAgcmVqZWN0ID0gX3JlamVjdDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiB0ZXN0V2l0aEFGcmVzaFBsYXRmb3JtKCkge1xuICAgIHRyeSB7XG4gICAgICBkZXN0cm95UGxhdGZvcm1CZWZvcmVCb290c3RyYXBwaW5nVGhlTmV3T25lKCk7XG5cbiAgICAgIGlmIChoYXNEb25lQXJndW1lbnQpIHtcbiAgICAgICAgYXdhaXQgZm4oKGVycm9yPzogRXJyb3IpID0+IHtcbiAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdCEoZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlISgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IHdoZW5Eb25lSXNDYWxsZWRQcm9taXNlITtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF3YWl0IGZuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHJlc2V0UGxhdGZvcm1BZnRlckJvb3RzdHJhcHBpbmcoKTtcbiAgICB9XG4gIH07XG59XG4iXX0=