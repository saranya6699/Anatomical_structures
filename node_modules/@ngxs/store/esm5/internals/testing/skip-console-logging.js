/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/// <reference types="jest" />
/// <reference types="jest" />
/**
 * @template T
 * @param {?} fn
 * @return {?}
 */
export function skipConsoleLogging(fn) {
    /** @type {?} */
    var consoleSpies = [
        jest.spyOn(console, 'log').mockImplementation((/**
         * @return {?}
         */
        function () { })),
        jest.spyOn(console, 'warn').mockImplementation((/**
         * @return {?}
         */
        function () { })),
        jest.spyOn(console, 'error').mockImplementation((/**
         * @return {?}
         */
        function () { })),
        jest.spyOn(console, 'info').mockImplementation((/**
         * @return {?}
         */
        function () { }))
    ];
    /**
     * @return {?}
     */
    function restoreSpies() {
        consoleSpies.forEach((/**
         * @param {?} spy
         * @return {?}
         */
        function (spy) { return spy.mockRestore(); }));
    }
    /** @type {?} */
    var restoreSpyAsync = false;
    try {
        /** @type {?} */
        var returnValue = fn();
        if (returnValue instanceof Promise) {
            restoreSpyAsync = true;
            return (/** @type {?} */ (returnValue.finally((/**
             * @return {?}
             */
            function () { return restoreSpies(); }))));
        }
        return returnValue;
    }
    finally {
        if (!restoreSpyAsync) {
            restoreSpies();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpcC1jb25zb2xlLWxvZ2dpbmcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy8iLCJzb3VyY2VzIjpbInNraXAtY29uc29sZS1sb2dnaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw4QkFBOEI7Ozs7Ozs7QUFFOUIsTUFBTSxVQUFVLGtCQUFrQixDQUFvQyxFQUFLOztRQUNuRSxZQUFZLEdBQUc7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsa0JBQWtCOzs7UUFBQyxjQUFPLENBQUMsRUFBQztRQUN2RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxrQkFBa0I7OztRQUFDLGNBQU8sQ0FBQyxFQUFDO1FBQ3hELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQjs7O1FBQUMsY0FBTyxDQUFDLEVBQUM7UUFDekQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsa0JBQWtCOzs7UUFBQyxjQUFPLENBQUMsRUFBQztLQUN6RDs7OztJQUNELFNBQVMsWUFBWTtRQUNuQixZQUFZLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFqQixDQUFpQixFQUFDLENBQUM7SUFDakQsQ0FBQzs7UUFDRyxlQUFlLEdBQUcsS0FBSztJQUMzQixJQUFJOztZQUNJLFdBQVcsR0FBRyxFQUFFLEVBQUU7UUFDeEIsSUFBSSxXQUFXLFlBQVksT0FBTyxFQUFFO1lBQ2xDLGVBQWUsR0FBRyxJQUFJLENBQUM7WUFDdkIsT0FBTyxtQkFBQSxXQUFXLENBQUMsT0FBTzs7O1lBQUMsY0FBTSxPQUFBLFlBQVksRUFBRSxFQUFkLENBQWMsRUFBQyxFQUFpQixDQUFDO1NBQ25FO1FBQ0QsT0FBTyxXQUFXLENBQUM7S0FDcEI7WUFBUztRQUNSLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDcEIsWUFBWSxFQUFFLENBQUM7U0FDaEI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cImplc3RcIiAvPlxuXG5leHBvcnQgZnVuY3Rpb24gc2tpcENvbnNvbGVMb2dnaW5nPFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueT4oZm46IFQpOiBSZXR1cm5UeXBlPFQ+IHtcbiAgY29uc3QgY29uc29sZVNwaWVzID0gW1xuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSksXG4gICAgamVzdC5zcHlPbihjb25zb2xlLCAnd2FybicpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSksXG4gICAgamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pLFxuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2luZm8nKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pXG4gIF07XG4gIGZ1bmN0aW9uIHJlc3RvcmVTcGllcygpIHtcbiAgICBjb25zb2xlU3BpZXMuZm9yRWFjaChzcHkgPT4gc3B5Lm1vY2tSZXN0b3JlKCkpO1xuICB9XG4gIGxldCByZXN0b3JlU3B5QXN5bmMgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXR1cm5WYWx1ZSA9IGZuKCk7XG4gICAgaWYgKHJldHVyblZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgcmVzdG9yZVNweUFzeW5jID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXR1cm5WYWx1ZS5maW5hbGx5KCgpID0+IHJlc3RvcmVTcGllcygpKSBhcyBSZXR1cm5UeXBlPFQ+O1xuICAgIH1cbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKCFyZXN0b3JlU3B5QXN5bmMpIHtcbiAgICAgIHJlc3RvcmVTcGllcygpO1xuICAgIH1cbiAgfVxufVxuIl19