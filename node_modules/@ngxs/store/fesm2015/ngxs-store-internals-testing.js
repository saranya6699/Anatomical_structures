import { Component, NgModule, ApplicationRef, destroyPlatform, VERSION, createPlatform } from '@angular/core';
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { BrowserModule, ɵBrowserDomAdapter, ɵgetDOM } from '@angular/platform-browser';
import { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';
import { NgxsModule, Store } from '@ngxs/store';
import { __awaiter } from 'tslib';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxsTestComponent {
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngAfterViewInit() { }
}
NgxsTestComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-root',
                template: ''
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxsTestModule {
    /**
     * @param {?} app
     * @return {?}
     */
    static ngDoBootstrap(app) {
        app.bootstrap(NgxsTestComponent);
    }
}
NgxsTestModule.decorators = [
    { type: NgModule, args: [{
                imports: [BrowserModule],
                declarations: [NgxsTestComponent],
                entryComponents: [NgxsTestComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxsTestBed {
    /**
     * @param {?} options
     * @return {?}
     */
    static configureTestingStates(options) {
        this.resetTestBed();
        if (options.before) {
            options.before();
        }
        TestBed.configureTestingModule({
            imports: [
                NgxsTestModule,
                NgxsModule.forRoot(options.states || [], options.ngxsOptions || {}),
                ...(options.imports || [])
            ]
        }).compileComponents();
        NgxsTestBed.ngxsBootstrap();
        return {
            /**
             * @return {?}
             */
            get store() {
                return TestBed.inject(Store);
            },
            /**
             * @return {?}
             */
            get getTestBed() {
                return TestBed;
            }
        };
    }
    /**
     * @private
     * @return {?}
     */
    static ngxsBootstrap() {
        NgxsTestBed.createRootNode();
        NgxsTestModule.ngDoBootstrap(TestBed.inject(ApplicationRef));
    }
    /**
     * @private
     * @return {?}
     */
    static resetTestBed() {
        TestBed.resetTestEnvironment();
        TestBed.initTestEnvironment(BrowserDynamicTestingModule, platformBrowserDynamicTesting());
    }
    /**
     * @private
     * @param {?=} selector
     * @return {?}
     */
    static createRootNode(selector = 'app-root') {
        /** @type {?} */
        const document = TestBed.inject(DOCUMENT);
        /** @type {?} */
        const adapter = new ɵBrowserDomAdapter();
        /** @type {?} */
        const root = adapter.createElement(selector);
        document.body.appendChild(root);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function createRootElement() {
    /** @type {?} */
    const document = TestBed.inject(DOCUMENT);
    /** @type {?} */
    const root = ɵgetDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
/**
 * @return {?}
 */
function removeRootElement() {
    /** @type {?} */
    const root = (/** @type {?} */ (document.getElementsByTagName('app-root').item(0)));
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
/**
 * @return {?}
 */
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
/**
 * @return {?}
 */
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    /** @type {?} */
    const version = +VERSION.major;
    // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa
    if (version < 14) {
        createPlatform(TestBed);
    }
}
/**
 * @param {?} fn
 * @return {?}
 */
function freshPlatform(fn) {
    /** @type {?} */
    let resolve = null;
    /** @type {?} */
    let reject = null;
    /** @type {?} */
    let whenDoneIsCalledPromise = null;
    /** @type {?} */
    const hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((/**
         * @param {?} _resolve
         * @param {?} _reject
         * @return {?}
         */
        (_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
        }));
    }
    return (/**
     * @return {?}
     */
    function testWithAFreshPlatform() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                destroyPlatformBeforeBootstrappingTheNewOne();
                if (hasDoneArgument) {
                    yield fn((/**
                     * @param {?=} error
                     * @return {?}
                     */
                    (error) => {
                        if (error) {
                            (/** @type {?} */ (reject))(error);
                        }
                        else {
                            (/** @type {?} */ (resolve))();
                        }
                    }));
                    yield (/** @type {?} */ (whenDoneIsCalledPromise));
                }
                else {
                    yield fn();
                }
            }
            finally {
                resetPlatformAfterBootstrapping();
            }
        });
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/// <reference types="jest" />
/// <reference types="jest" />
/**
 * @template T
 * @param {?} fn
 * @return {?}
 */
function skipConsoleLogging(fn) {
    /** @type {?} */
    const consoleSpies = [
        jest.spyOn(console, 'log').mockImplementation((/**
         * @return {?}
         */
        () => { })),
        jest.spyOn(console, 'warn').mockImplementation((/**
         * @return {?}
         */
        () => { })),
        jest.spyOn(console, 'error').mockImplementation((/**
         * @return {?}
         */
        () => { })),
        jest.spyOn(console, 'info').mockImplementation((/**
         * @return {?}
         */
        () => { }))
    ];
    /**
     * @return {?}
     */
    function restoreSpies() {
        consoleSpies.forEach((/**
         * @param {?} spy
         * @return {?}
         */
        spy => spy.mockRestore()));
    }
    /** @type {?} */
    let restoreSpyAsync = false;
    try {
        /** @type {?} */
        const returnValue = fn();
        if (returnValue instanceof Promise) {
            restoreSpyAsync = true;
            return (/** @type {?} */ (returnValue.finally((/**
             * @return {?}
             */
            () => restoreSpies()))));
        }
        return returnValue;
    }
    finally {
        if (!restoreSpyAsync) {
            restoreSpies();
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxsTestBed, freshPlatform, skipConsoleLogging };
//# sourceMappingURL=ngxs-store-internals-testing.js.map
