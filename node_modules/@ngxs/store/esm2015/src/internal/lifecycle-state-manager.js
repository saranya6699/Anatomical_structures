/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NgxsBootstrapper } from '@ngxs/store/internals';
import { EMPTY, Subject } from 'rxjs';
import { catchError, filter, mergeMap, pairwise, startWith, takeUntil, tap } from 'rxjs/operators';
import { Store } from '../store';
import { getValue } from '../utils/utils';
import { InternalErrorReporter } from './error-handler';
import { StateContextFactory } from './state-context-factory';
import { InternalStateOperations } from './state-operations';
import { NgxsSimpleChange } from '../symbols';
export class LifecycleStateManager {
    /**
     * @param {?} _store
     * @param {?} _internalErrorReporter
     * @param {?} _internalStateOperations
     * @param {?} _stateContextFactory
     * @param {?} _bootstrapper
     */
    constructor(_store, _internalErrorReporter, _internalStateOperations, _stateContextFactory, _bootstrapper) {
        this._store = _store;
        this._internalErrorReporter = _internalErrorReporter;
        this._internalStateOperations = _internalStateOperations;
        this._stateContextFactory = _stateContextFactory;
        this._bootstrapper = _bootstrapper;
        this._destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy$.next();
    }
    /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    ngxsBootstrap(action, results) {
        this._internalStateOperations
            .getRootStateOperations()
            .dispatch(action)
            .pipe(filter((/**
         * @return {?}
         */
        () => !!results)), tap((/**
         * @return {?}
         */
        () => this._invokeInitOnStates((/** @type {?} */ (results)).states))), mergeMap((/**
         * @return {?}
         */
        () => this._bootstrapper.appBootstrapped$)), filter((/**
         * @param {?} appBootstrapped
         * @return {?}
         */
        appBootstrapped => !!appBootstrapped)), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            // The `SafeSubscriber` (which is used by most RxJS operators) re-throws
            // errors asynchronously (`setTimeout(() => { throw error })`). This might
            // break existing user's code or unit tests. We catch the error manually to
            // be backward compatible with the old behavior.
            this._internalErrorReporter.reportErrorSafely(error);
            return EMPTY;
        })), takeUntil(this._destroy$))
            .subscribe((/**
         * @return {?}
         */
        () => this._invokeBootstrapOnStates((/** @type {?} */ (results)).states)));
    }
    /**
     * @private
     * @param {?} mappedStores
     * @return {?}
     */
    _invokeInitOnStates(mappedStores) {
        for (const mappedStore of mappedStores) {
            /** @type {?} */
            const instance = mappedStore.instance;
            if (instance.ngxsOnChanges) {
                this._store
                    .select((/**
                 * @param {?} state
                 * @return {?}
                 */
                state => getValue(state, mappedStore.path)))
                    .pipe(startWith(undefined), pairwise(), takeUntil(this._destroy$))
                    .subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                ([previousValue, currentValue]) => {
                    /** @type {?} */
                    const change = new NgxsSimpleChange(previousValue, currentValue, !mappedStore.isInitialised);
                    (/** @type {?} */ (instance.ngxsOnChanges))(change);
                }));
            }
            if (instance.ngxsOnInit) {
                instance.ngxsOnInit(this._getStateContext(mappedStore));
            }
            mappedStore.isInitialised = true;
        }
    }
    /**
     * @private
     * @param {?} mappedStores
     * @return {?}
     */
    _invokeBootstrapOnStates(mappedStores) {
        for (const mappedStore of mappedStores) {
            /** @type {?} */
            const instance = mappedStore.instance;
            if (instance.ngxsAfterBootstrap) {
                instance.ngxsAfterBootstrap(this._getStateContext(mappedStore));
            }
        }
    }
    /**
     * @private
     * @param {?} mappedStore
     * @return {?}
     */
    _getStateContext(mappedStore) {
        return this._stateContextFactory.createStateContext(mappedStore);
    }
}
LifecycleStateManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LifecycleStateManager.ctorParameters = () => [
    { type: Store },
    { type: InternalErrorReporter },
    { type: InternalStateOperations },
    { type: StateContextFactory },
    { type: NgxsBootstrapper }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._destroy$;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._store;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._internalErrorReporter;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._internalStateOperations;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._stateContextFactory;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype._bootstrapper;
}
//# sourceMappingURL=data:application/json;base64,