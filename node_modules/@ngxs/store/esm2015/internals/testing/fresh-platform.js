/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { TestBed } from '@angular/core/testing';
import { DOCUMENT } from '@angular/common';
import { ÉµgetDOM as getDOM } from '@angular/platform-browser';
import { VERSION, destroyPlatform, createPlatform } from '@angular/core';
/**
 * @return {?}
 */
function createRootElement() {
    /** @type {?} */
    const document = TestBed.inject(DOCUMENT);
    /** @type {?} */
    const root = getDOM().createElement('app-root', document);
    document.body.appendChild(root);
}
/**
 * @return {?}
 */
function removeRootElement() {
    /** @type {?} */
    const root = (/** @type {?} */ (document.getElementsByTagName('app-root').item(0)));
    try {
        document.body.removeChild(root);
    }
    catch (_a) { }
}
/**
 * @return {?}
 */
function destroyPlatformBeforeBootstrappingTheNewOne() {
    destroyPlatform();
    createRootElement();
}
// As we create our custom platform via `bootstrapModule`
// we have to destroy it after assetions and revert
// the previous one
/**
 * @return {?}
 */
function resetPlatformAfterBootstrapping() {
    removeRootElement();
    destroyPlatform();
    /** @type {?} */
    const version = +VERSION.major;
    // https://github.com/angular/angular/commit/e250db4f261741b04ee4cbad4dec41a8908a12aa
    if (version < 14) {
        createPlatform(TestBed);
    }
}
/**
 * @param {?} fn
 * @return {?}
 */
export function freshPlatform(fn) {
    /** @type {?} */
    let resolve = null;
    /** @type {?} */
    let reject = null;
    /** @type {?} */
    let whenDoneIsCalledPromise = null;
    /** @type {?} */
    const hasDoneArgument = fn.length === 1;
    if (hasDoneArgument) {
        whenDoneIsCalledPromise = new Promise((/**
         * @param {?} _resolve
         * @param {?} _reject
         * @return {?}
         */
        (_resolve, _reject) => {
            resolve = _resolve;
            reject = _reject;
        }));
    }
    return (/**
     * @return {?}
     */
    function testWithAFreshPlatform() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                destroyPlatformBeforeBootstrappingTheNewOne();
                if (hasDoneArgument) {
                    yield fn((/**
                     * @param {?=} error
                     * @return {?}
                     */
                    (error) => {
                        if (error) {
                            (/** @type {?} */ (reject))(error);
                        }
                        else {
                            (/** @type {?} */ (resolve))();
                        }
                    }));
                    yield (/** @type {?} */ (whenDoneIsCalledPromise));
                }
                else {
                    yield fn();
                }
            }
            finally {
                resetPlatformAfterBootstrapping();
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJlc2gtcGxhdGZvcm0uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy8iLCJzb3VyY2VzIjpbImZyZXNoLXBsYXRmb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxJQUFJLE1BQU0sRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUV6RSxTQUFTLGlCQUFpQjs7VUFDbEIsUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDOztVQUNuQyxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7SUFDekQsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsQ0FBQzs7OztBQUVELFNBQVMsaUJBQWlCOztVQUNsQixJQUFJLEdBQVksbUJBQUEsUUFBUSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQztJQUN4RSxJQUFJO1FBQ0YsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7S0FDakM7SUFBQyxXQUFNLEdBQUU7QUFDWixDQUFDOzs7O0FBRUQsU0FBUywyQ0FBMkM7SUFDbEQsZUFBZSxFQUFFLENBQUM7SUFDbEIsaUJBQWlCLEVBQUUsQ0FBQztBQUN0QixDQUFDOzs7Ozs7O0FBS0QsU0FBUywrQkFBK0I7SUFDdEMsaUJBQWlCLEVBQUUsQ0FBQztJQUNwQixlQUFlLEVBQUUsQ0FBQzs7VUFDWixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSztJQUM5QixxRkFBcUY7SUFDckYsSUFBSSxPQUFPLEdBQUcsRUFBRSxFQUFFO1FBQ2hCLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN6QjtBQUNILENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUEwQzs7UUFDbEUsT0FBTyxHQUF3QixJQUFJOztRQUNuQyxNQUFNLEdBQW9DLElBQUk7O1FBQzlDLHVCQUF1QixHQUF5QixJQUFJOztVQUVsRCxlQUFlLEdBQUcsRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDO0lBRXZDLElBQUksZUFBZSxFQUFFO1FBQ25CLHVCQUF1QixHQUFHLElBQUksT0FBTzs7Ozs7UUFBTyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRTtZQUNoRSxPQUFPLEdBQUcsUUFBUSxDQUFDO1lBQ25CLE1BQU0sR0FBRyxPQUFPLENBQUM7UUFDbkIsQ0FBQyxFQUFDLENBQUM7S0FDSjtJQUVEOzs7SUFBTyxTQUFlLHNCQUFzQjs7WUFDMUMsSUFBSTtnQkFDRiwyQ0FBMkMsRUFBRSxDQUFDO2dCQUU5QyxJQUFJLGVBQWUsRUFBRTtvQkFDbkIsTUFBTSxFQUFFOzs7O29CQUFDLENBQUMsS0FBYSxFQUFFLEVBQUU7d0JBQ3pCLElBQUksS0FBSyxFQUFFOzRCQUNULG1CQUFBLE1BQU0sRUFBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO3lCQUNoQjs2QkFBTTs0QkFDTCxtQkFBQSxPQUFPLEVBQUMsRUFBRSxDQUFDO3lCQUNaO29CQUNILENBQUMsRUFBQyxDQUFDO29CQUNILE1BQU0sbUJBQUEsdUJBQXVCLEVBQUMsQ0FBQztpQkFDaEM7cUJBQU07b0JBQ0wsTUFBTSxFQUFFLEVBQUUsQ0FBQztpQkFDWjthQUNGO29CQUFTO2dCQUNSLCtCQUErQixFQUFFLENBQUM7YUFDbkM7UUFDSCxDQUFDO0tBQUEsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IMm1Z2V0RE9NIGFzIGdldERPTSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgVkVSU0lPTiwgZGVzdHJveVBsYXRmb3JtLCBjcmVhdGVQbGF0Zm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5mdW5jdGlvbiBjcmVhdGVSb290RWxlbWVudCgpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBUZXN0QmVkLmluamVjdChET0NVTUVOVCk7XG4gIGNvbnN0IHJvb3QgPSBnZXRET00oKS5jcmVhdGVFbGVtZW50KCdhcHAtcm9vdCcsIGRvY3VtZW50KTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyb290KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlUm9vdEVsZW1lbnQoKSB7XG4gIGNvbnN0IHJvb3Q6IEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYXBwLXJvb3QnKS5pdGVtKDApITtcbiAgdHJ5IHtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHJvb3QpO1xuICB9IGNhdGNoIHt9XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3lQbGF0Zm9ybUJlZm9yZUJvb3RzdHJhcHBpbmdUaGVOZXdPbmUoKSB7XG4gIGRlc3Ryb3lQbGF0Zm9ybSgpO1xuICBjcmVhdGVSb290RWxlbWVudCgpO1xufVxuXG4vLyBBcyB3ZSBjcmVhdGUgb3VyIGN1c3RvbSBwbGF0Zm9ybSB2aWEgYGJvb3RzdHJhcE1vZHVsZWBcbi8vIHdlIGhhdmUgdG8gZGVzdHJveSBpdCBhZnRlciBhc3NldGlvbnMgYW5kIHJldmVydFxuLy8gdGhlIHByZXZpb3VzIG9uZVxuZnVuY3Rpb24gcmVzZXRQbGF0Zm9ybUFmdGVyQm9vdHN0cmFwcGluZygpIHtcbiAgcmVtb3ZlUm9vdEVsZW1lbnQoKTtcbiAgZGVzdHJveVBsYXRmb3JtKCk7XG4gIGNvbnN0IHZlcnNpb24gPSArVkVSU0lPTi5tYWpvcjtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9jb21taXQvZTI1MGRiNGYyNjE3NDFiMDRlZTRjYmFkNGRlYzQxYTg5MDhhMTJhYVxuICBpZiAodmVyc2lvbiA8IDE0KSB7XG4gICAgY3JlYXRlUGxhdGZvcm0oVGVzdEJlZCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyZXNoUGxhdGZvcm0oZm46IChkb25lPzogVm9pZEZ1bmN0aW9uKSA9PiBQcm9taXNlPHZvaWQ+KSB7XG4gIGxldCByZXNvbHZlOiBWb2lkRnVuY3Rpb24gfCBudWxsID0gbnVsbDtcbiAgbGV0IHJlamVjdDogKChlcnJvcjogRXJyb3IpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG4gIGxldCB3aGVuRG9uZUlzQ2FsbGVkUHJvbWlzZTogUHJvbWlzZTx2b2lkPiB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0IGhhc0RvbmVBcmd1bWVudCA9IGZuLmxlbmd0aCA9PT0gMTtcblxuICBpZiAoaGFzRG9uZUFyZ3VtZW50KSB7XG4gICAgd2hlbkRvbmVJc0NhbGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZTx2b2lkPigoX3Jlc29sdmUsIF9yZWplY3QpID0+IHtcbiAgICAgIHJlc29sdmUgPSBfcmVzb2x2ZTtcbiAgICAgIHJlamVjdCA9IF9yZWplY3Q7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gdGVzdFdpdGhBRnJlc2hQbGF0Zm9ybSgpIHtcbiAgICB0cnkge1xuICAgICAgZGVzdHJveVBsYXRmb3JtQmVmb3JlQm9vdHN0cmFwcGluZ1RoZU5ld09uZSgpO1xuXG4gICAgICBpZiAoaGFzRG9uZUFyZ3VtZW50KSB7XG4gICAgICAgIGF3YWl0IGZuKChlcnJvcj86IEVycm9yKSA9PiB7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZWplY3QhKGVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZSEoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCB3aGVuRG9uZUlzQ2FsbGVkUHJvbWlzZSE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBmbigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICByZXNldFBsYXRmb3JtQWZ0ZXJCb290c3RyYXBwaW5nKCk7XG4gICAgfVxuICB9O1xufVxuIl19