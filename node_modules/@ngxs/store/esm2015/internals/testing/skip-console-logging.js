/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/// <reference types="jest" />
/// <reference types="jest" />
/**
 * @template T
 * @param {?} fn
 * @return {?}
 */
export function skipConsoleLogging(fn) {
    /** @type {?} */
    const consoleSpies = [
        jest.spyOn(console, 'log').mockImplementation((/**
         * @return {?}
         */
        () => { })),
        jest.spyOn(console, 'warn').mockImplementation((/**
         * @return {?}
         */
        () => { })),
        jest.spyOn(console, 'error').mockImplementation((/**
         * @return {?}
         */
        () => { })),
        jest.spyOn(console, 'info').mockImplementation((/**
         * @return {?}
         */
        () => { }))
    ];
    /**
     * @return {?}
     */
    function restoreSpies() {
        consoleSpies.forEach((/**
         * @param {?} spy
         * @return {?}
         */
        spy => spy.mockRestore()));
    }
    /** @type {?} */
    let restoreSpyAsync = false;
    try {
        /** @type {?} */
        const returnValue = fn();
        if (returnValue instanceof Promise) {
            restoreSpyAsync = true;
            return (/** @type {?} */ (returnValue.finally((/**
             * @return {?}
             */
            () => restoreSpies()))));
        }
        return returnValue;
    }
    finally {
        if (!restoreSpyAsync) {
            restoreSpies();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tpcC1jb25zb2xlLWxvZ2dpbmcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS9pbnRlcm5hbHMvdGVzdGluZy8iLCJzb3VyY2VzIjpbInNraXAtY29uc29sZS1sb2dnaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw4QkFBOEI7Ozs7Ozs7QUFFOUIsTUFBTSxVQUFVLGtCQUFrQixDQUFvQyxFQUFLOztVQUNuRSxZQUFZLEdBQUc7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsa0JBQWtCOzs7UUFBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUM7UUFDdkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsa0JBQWtCOzs7UUFBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUM7UUFDeEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsa0JBQWtCOzs7UUFBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUM7UUFDekQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsa0JBQWtCOzs7UUFBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUM7S0FDekQ7Ozs7SUFDRCxTQUFTLFlBQVk7UUFDbkIsWUFBWSxDQUFDLE9BQU87Ozs7UUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBQyxDQUFDO0lBQ2pELENBQUM7O1FBQ0csZUFBZSxHQUFHLEtBQUs7SUFDM0IsSUFBSTs7Y0FDSSxXQUFXLEdBQUcsRUFBRSxFQUFFO1FBQ3hCLElBQUksV0FBVyxZQUFZLE9BQU8sRUFBRTtZQUNsQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLE9BQU8sbUJBQUEsV0FBVyxDQUFDLE9BQU87OztZQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksRUFBRSxFQUFDLEVBQWlCLENBQUM7U0FDbkU7UUFDRCxPQUFPLFdBQVcsQ0FBQztLQUNwQjtZQUFTO1FBQ1IsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNwQixZQUFZLEVBQUUsQ0FBQztTQUNoQjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiamVzdFwiIC8+XG5cbmV4cG9ydCBmdW5jdGlvbiBza2lwQ29uc29sZUxvZ2dpbmc8VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PihmbjogVCk6IFJldHVyblR5cGU8VD4ge1xuICBjb25zdCBjb25zb2xlU3BpZXMgPSBbXG4gICAgamVzdC5zcHlPbihjb25zb2xlLCAnbG9nJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KSxcbiAgICBqZXN0LnNweU9uKGNvbnNvbGUsICd3YXJuJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KSxcbiAgICBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSksXG4gICAgamVzdC5zcHlPbihjb25zb2xlLCAnaW5mbycpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSlcbiAgXTtcbiAgZnVuY3Rpb24gcmVzdG9yZVNwaWVzKCkge1xuICAgIGNvbnNvbGVTcGllcy5mb3JFYWNoKHNweSA9PiBzcHkubW9ja1Jlc3RvcmUoKSk7XG4gIH1cbiAgbGV0IHJlc3RvcmVTcHlBc3luYyA9IGZhbHNlO1xuICB0cnkge1xuICAgIGNvbnN0IHJldHVyblZhbHVlID0gZm4oKTtcbiAgICBpZiAocmV0dXJuVmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICByZXN0b3JlU3B5QXN5bmMgPSB0cnVlO1xuICAgICAgcmV0dXJuIHJldHVyblZhbHVlLmZpbmFsbHkoKCkgPT4gcmVzdG9yZVNwaWVzKCkpIGFzIFJldHVyblR5cGU8VD47XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpZiAoIXJlc3RvcmVTcHlBc3luYykge1xuICAgICAgcmVzdG9yZVNwaWVzKCk7XG4gICAgfVxuICB9XG59XG4iXX0=